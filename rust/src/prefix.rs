// This file is @generated by wasmcloud/weld-codegen 0.7.0.
// It is not intended for manual editing.
// namespace: org.sigscale.interfaces.prefix

#[allow(unused_imports)]
use async_trait::async_trait;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use std::{borrow::Borrow, borrow::Cow, io::Write, string::ToString};
#[allow(unused_imports)]
use wasmbus_rpc::{
    cbor::*,
    common::{
        deserialize, message_format, serialize, Context, Message, MessageDispatch, MessageFormat,
        SendOpts, Transport,
    },
    error::{RpcError, RpcResult},
    Timestamp,
};

#[allow(dead_code)]
pub const SMITHY_VERSION: &str = "1.0";

/// Parameters sent for CreateTable
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct CreateTableRequest {
    /// Table name
    #[serde(default)]
    pub name: String,
}

// Encode CreateTableRequest as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_create_table_request<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &CreateTableRequest,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(1)?;
    e.str("name")?;
    e.str(&val.name)?;
    Ok(())
}

// Decode CreateTableRequest from cbor input stream
#[doc(hidden)]
pub fn decode_create_table_request(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<CreateTableRequest, RpcError> {
    let __result = {
        let mut name: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct CreateTableRequest, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => name = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "name" => name = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        CreateTableRequest {
            name: if let Some(__x) = name {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field CreateTableRequest.name (#0)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// Response to CreateTable request
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct CreateTableResponse {
    /// Optional string w/rejection reason
    #[serde(rename = "failReason")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fail_reason: Option<String>,
    /// Indicates a successful table creation
    #[serde(default)]
    pub success: bool,
}

// Encode CreateTableResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_create_table_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &CreateTableResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    if let Some(val) = val.fail_reason.as_ref() {
        e.str("failReason")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("success")?;
    e.bool(val.success)?;
    Ok(())
}

// Decode CreateTableResponse from cbor input stream
#[doc(hidden)]
pub fn decode_create_table_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<CreateTableResponse, RpcError> {
    let __result = {
        let mut fail_reason: Option<Option<String>> = Some(None);
        let mut success: Option<bool> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct CreateTableResponse, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        fail_reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    1 => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "failReason" => {
                        fail_reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "success" => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        }
        CreateTableResponse {
            fail_reason: fail_reason.unwrap(),

            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field CreateTableResponse.success (#1)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// Parameters sent for DestroyTable
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct DestroyTableRequest {
    /// Table name
    #[serde(default)]
    pub name: String,
}

// Encode DestroyTableRequest as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_destroy_table_request<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &DestroyTableRequest,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(1)?;
    e.str("name")?;
    e.str(&val.name)?;
    Ok(())
}

// Decode DestroyTableRequest from cbor input stream
#[doc(hidden)]
pub fn decode_destroy_table_request(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<DestroyTableRequest, RpcError> {
    let __result = {
        let mut name: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct DestroyTableRequest, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => name = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "name" => name = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        DestroyTableRequest {
            name: if let Some(__x) = name {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field DestroyTableRequest.name (#0)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// Response to DestroyTable request
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct DestroyTableResponse {
    /// Optional string w/rejection reason
    #[serde(rename = "failReason")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fail_reason: Option<String>,
    /// Indicates a successful table destruction
    #[serde(default)]
    pub success: bool,
}

// Encode DestroyTableResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_destroy_table_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &DestroyTableResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    if let Some(val) = val.fail_reason.as_ref() {
        e.str("failReason")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("success")?;
    e.bool(val.success)?;
    Ok(())
}

// Decode DestroyTableResponse from cbor input stream
#[doc(hidden)]
pub fn decode_destroy_table_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<DestroyTableResponse, RpcError> {
    let __result = {
        let mut fail_reason: Option<Option<String>> = Some(None);
        let mut success: Option<bool> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct DestroyTableResponse, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        fail_reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    1 => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "failReason" => {
                        fail_reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "success" => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        }
        DestroyTableResponse {
            fail_reason: fail_reason.unwrap(),

            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field DestroyTableResponse.success (#1)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// Parameters sent for InsertPrefix
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct InsertPrefixRequest {
    /// Table name
    #[serde(default)]
    pub name: String,
    /// Prefix
    #[serde(default)]
    pub prefix: String,
    /// Value
    #[serde(default)]
    pub value: u32,
}

// Encode InsertPrefixRequest as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_insert_prefix_request<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &InsertPrefixRequest,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(3)?;
    e.str("name")?;
    e.str(&val.name)?;
    e.str("prefix")?;
    e.str(&val.prefix)?;
    e.str("value")?;
    e.u32(val.value)?;
    Ok(())
}

// Decode InsertPrefixRequest from cbor input stream
#[doc(hidden)]
pub fn decode_insert_prefix_request(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<InsertPrefixRequest, RpcError> {
    let __result = {
        let mut name: Option<String> = None;
        let mut prefix: Option<String> = None;
        let mut value: Option<u32> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct InsertPrefixRequest, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => name = Some(d.str()?.to_string()),
                    1 => prefix = Some(d.str()?.to_string()),
                    2 => value = Some(d.u32()?),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "name" => name = Some(d.str()?.to_string()),
                    "prefix" => prefix = Some(d.str()?.to_string()),
                    "value" => value = Some(d.u32()?),
                    _ => d.skip()?,
                }
            }
        }
        InsertPrefixRequest {
            name: if let Some(__x) = name {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field InsertPrefixRequest.name (#0)".to_string(),
                ));
            },

            prefix: if let Some(__x) = prefix {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field InsertPrefixRequest.prefix (#1)".to_string(),
                ));
            },

            value: if let Some(__x) = value {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field InsertPrefixRequest.value (#2)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// Response to InsertPrefix request
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct InsertPrefixResponse {
    /// Optional string w/rejection reason
    #[serde(rename = "failReason")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fail_reason: Option<String>,
    /// Indicates a successful insertion
    #[serde(default)]
    pub success: bool,
}

// Encode InsertPrefixResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_insert_prefix_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &InsertPrefixResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    if let Some(val) = val.fail_reason.as_ref() {
        e.str("failReason")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("success")?;
    e.bool(val.success)?;
    Ok(())
}

// Decode InsertPrefixResponse from cbor input stream
#[doc(hidden)]
pub fn decode_insert_prefix_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<InsertPrefixResponse, RpcError> {
    let __result = {
        let mut fail_reason: Option<Option<String>> = Some(None);
        let mut success: Option<bool> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct InsertPrefixResponse, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        fail_reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    1 => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "failReason" => {
                        fail_reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "success" => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        }
        InsertPrefixResponse {
            fail_reason: fail_reason.unwrap(),

            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field InsertPrefixResponse.success (#1)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// Parameters sent for MatchPrefix
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct MatchPrefixRequest {
    /// Address
    #[serde(default)]
    pub address: String,
    /// Table name
    #[serde(default)]
    pub name: String,
}

// Encode MatchPrefixRequest as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_match_prefix_request<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &MatchPrefixRequest,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    e.str("address")?;
    e.str(&val.address)?;
    e.str("name")?;
    e.str(&val.name)?;
    Ok(())
}

// Decode MatchPrefixRequest from cbor input stream
#[doc(hidden)]
pub fn decode_match_prefix_request(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<MatchPrefixRequest, RpcError> {
    let __result = {
        let mut address: Option<String> = None;
        let mut name: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct MatchPrefixRequest, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => address = Some(d.str()?.to_string()),
                    1 => name = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "address" => address = Some(d.str()?.to_string()),
                    "name" => name = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        MatchPrefixRequest {
            address: if let Some(__x) = address {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field MatchPrefixRequest.address (#0)".to_string(),
                ));
            },

            name: if let Some(__x) = name {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field MatchPrefixRequest.name (#1)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// Response to MatchPrefix request
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct MatchPrefixResponse {
    /// Optional string w/rejection reason
    #[serde(rename = "failReason")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fail_reason: Option<String>,
    /// Indicates a successful find
    #[serde(default)]
    pub success: bool,
    /// Value
    #[serde(default)]
    pub value: u32,
}

// Encode MatchPrefixResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_match_prefix_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &MatchPrefixResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(3)?;
    if let Some(val) = val.fail_reason.as_ref() {
        e.str("failReason")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("success")?;
    e.bool(val.success)?;
    e.str("value")?;
    e.u32(val.value)?;
    Ok(())
}

// Decode MatchPrefixResponse from cbor input stream
#[doc(hidden)]
pub fn decode_match_prefix_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<MatchPrefixResponse, RpcError> {
    let __result = {
        let mut fail_reason: Option<Option<String>> = Some(None);
        let mut success: Option<bool> = None;
        let mut value: Option<u32> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct MatchPrefixResponse, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        fail_reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    1 => success = Some(d.bool()?),
                    2 => value = Some(d.u32()?),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "failReason" => {
                        fail_reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "success" => success = Some(d.bool()?),
                    "value" => value = Some(d.u32()?),
                    _ => d.skip()?,
                }
            }
        }
        MatchPrefixResponse {
            fail_reason: fail_reason.unwrap(),

            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field MatchPrefixResponse.success (#1)".to_string(),
                ));
            },

            value: if let Some(__x) = value {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field MatchPrefixResponse.value (#2)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// Parameters sent for RemovePrefix
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct RemovePrefixRequest {
    /// Table name
    #[serde(default)]
    pub name: String,
    /// Prefix
    #[serde(default)]
    pub prefix: String,
}

// Encode RemovePrefixRequest as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_remove_prefix_request<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &RemovePrefixRequest,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    e.str("name")?;
    e.str(&val.name)?;
    e.str("prefix")?;
    e.str(&val.prefix)?;
    Ok(())
}

// Decode RemovePrefixRequest from cbor input stream
#[doc(hidden)]
pub fn decode_remove_prefix_request(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<RemovePrefixRequest, RpcError> {
    let __result = {
        let mut name: Option<String> = None;
        let mut prefix: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct RemovePrefixRequest, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => name = Some(d.str()?.to_string()),
                    1 => prefix = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "name" => name = Some(d.str()?.to_string()),
                    "prefix" => prefix = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        RemovePrefixRequest {
            name: if let Some(__x) = name {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field RemovePrefixRequest.name (#0)".to_string(),
                ));
            },

            prefix: if let Some(__x) = prefix {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field RemovePrefixRequest.prefix (#1)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// Response to RemovePrefix request
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct RemovePrefixResponse {
    /// Optional string w/rejection reason
    #[serde(rename = "failReason")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fail_reason: Option<String>,
    /// Indicates a successful removal
    #[serde(default)]
    pub success: bool,
}

// Encode RemovePrefixResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_remove_prefix_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &RemovePrefixResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    if let Some(val) = val.fail_reason.as_ref() {
        e.str("failReason")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("success")?;
    e.bool(val.success)?;
    Ok(())
}

// Decode RemovePrefixResponse from cbor input stream
#[doc(hidden)]
pub fn decode_remove_prefix_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<RemovePrefixResponse, RpcError> {
    let __result = {
        let mut fail_reason: Option<Option<String>> = Some(None);
        let mut success: Option<bool> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct RemovePrefixResponse, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        fail_reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    1 => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "failReason" => {
                        fail_reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "success" => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        }
        RemovePrefixResponse {
            fail_reason: fail_reason.unwrap(),

            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field RemovePrefixResponse.success (#1)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// The PrefixTable service has methods for table and row lifecycle management
/// wasmbus.contractId: sigscale:prefixtables
/// wasmbus.providerReceive
/// wasmbus.actorReceive
#[async_trait]
pub trait PrefixTables {
    /// returns the capability contract id for this interface
    fn contract_id() -> &'static str {
        "sigscale:prefixtables"
    }
    /// Creates a prefix table
    async fn create_table(
        &self,
        ctx: &Context,
        arg: &CreateTableRequest,
    ) -> RpcResult<CreateTableResponse>;
    /// Destroys a prefix table
    async fn destroy_table(
        &self,
        ctx: &Context,
        arg: &DestroyTableRequest,
    ) -> RpcResult<DestroyTableResponse>;
    /// InsertPrefix a prefix in a table
    async fn insert_prefix(
        &self,
        ctx: &Context,
        arg: &InsertPrefixRequest,
    ) -> RpcResult<InsertPrefixResponse>;
    /// RemovePrefix a prefix from a table
    async fn remove_prefix(
        &self,
        ctx: &Context,
        arg: &RemovePrefixRequest,
    ) -> RpcResult<RemovePrefixResponse>;
    /// MatchPrefix an address in a prefix table
    async fn match_prefix(
        &self,
        ctx: &Context,
        arg: &MatchPrefixRequest,
    ) -> RpcResult<MatchPrefixResponse>;
}

/// PrefixTablesReceiver receives messages defined in the PrefixTables service trait
/// The PrefixTable service has methods for table and row lifecycle management
#[doc(hidden)]
#[async_trait]
pub trait PrefixTablesReceiver: MessageDispatch + PrefixTables {
    async fn dispatch(&self, ctx: &Context, message: Message<'_>) -> Result<Vec<u8>, RpcError> {
        match message.method {
            "CreateTable" => {
                let value: CreateTableRequest = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'CreateTableRequest': {}", e)))?;

                let resp = PrefixTables::create_table(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            "DestroyTable" => {
                let value: DestroyTableRequest = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'DestroyTableRequest': {}", e)))?;

                let resp = PrefixTables::destroy_table(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            "InsertPrefix" => {
                let value: InsertPrefixRequest = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'InsertPrefixRequest': {}", e)))?;

                let resp = PrefixTables::insert_prefix(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            "RemovePrefix" => {
                let value: RemovePrefixRequest = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'RemovePrefixRequest': {}", e)))?;

                let resp = PrefixTables::remove_prefix(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            "MatchPrefix" => {
                let value: MatchPrefixRequest = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'MatchPrefixRequest': {}", e)))?;

                let resp = PrefixTables::match_prefix(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            _ => Err(RpcError::MethodNotHandled(format!(
                "PrefixTables::{}",
                message.method
            ))),
        }
    }
}

/// PrefixTablesSender sends messages to a PrefixTables service
/// The PrefixTable service has methods for table and row lifecycle management
/// client for sending PrefixTables messages
#[derive(Clone, Debug)]
pub struct PrefixTablesSender<T: Transport> {
    transport: T,
}

impl<T: Transport> PrefixTablesSender<T> {
    /// Constructs a PrefixTablesSender with the specified transport
    pub fn via(transport: T) -> Self {
        Self { transport }
    }

    pub fn set_timeout(&self, interval: std::time::Duration) {
        self.transport.set_timeout(interval);
    }
}

#[cfg(not(target_arch = "wasm32"))]
impl<'send> PrefixTablesSender<wasmbus_rpc::provider::ProviderTransport<'send>> {
    /// Constructs a Sender using an actor's LinkDefinition,
    /// Uses the provider's HostBridge for rpc
    pub fn for_actor(ld: &'send wasmbus_rpc::core::LinkDefinition) -> Self {
        Self {
            transport: wasmbus_rpc::provider::ProviderTransport::new(ld, None),
        }
    }
}
#[cfg(target_arch = "wasm32")]
impl PrefixTablesSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for actor-to-actor messaging
    /// using the recipient actor's public key
    pub fn to_actor(actor_id: &str) -> Self {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_actor(actor_id.to_string()).unwrap();
        Self { transport }
    }
}

#[cfg(target_arch = "wasm32")]
impl PrefixTablesSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for sending to a PrefixTables provider
    /// implementing the 'sigscale:prefixtables' capability contract, with the "default" link
    pub fn new() -> Self {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_provider("sigscale:prefixtables", "default")
                .unwrap();
        Self { transport }
    }

    /// Constructs a client for sending to a PrefixTables provider
    /// implementing the 'sigscale:prefixtables' capability contract, with the specified link name
    pub fn new_with_link(link_name: &str) -> wasmbus_rpc::error::RpcResult<Self> {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_provider("sigscale:prefixtables", link_name)?;
        Ok(Self { transport })
    }
}
#[async_trait]
impl<T: Transport + std::marker::Sync + std::marker::Send> PrefixTables for PrefixTablesSender<T> {
    #[allow(unused)]
    /// Creates a prefix table
    async fn create_table(
        &self,
        ctx: &Context,
        arg: &CreateTableRequest,
    ) -> RpcResult<CreateTableResponse> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "PrefixTables.CreateTable",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: CreateTableResponse = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': CreateTableResponse", e)))?;
        Ok(value)
    }
    #[allow(unused)]
    /// Destroys a prefix table
    async fn destroy_table(
        &self,
        ctx: &Context,
        arg: &DestroyTableRequest,
    ) -> RpcResult<DestroyTableResponse> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "PrefixTables.DestroyTable",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: DestroyTableResponse = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': DestroyTableResponse", e)))?;
        Ok(value)
    }
    #[allow(unused)]
    /// InsertPrefix a prefix in a table
    async fn insert_prefix(
        &self,
        ctx: &Context,
        arg: &InsertPrefixRequest,
    ) -> RpcResult<InsertPrefixResponse> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "PrefixTables.InsertPrefix",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: InsertPrefixResponse = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': InsertPrefixResponse", e)))?;
        Ok(value)
    }
    #[allow(unused)]
    /// RemovePrefix a prefix from a table
    async fn remove_prefix(
        &self,
        ctx: &Context,
        arg: &RemovePrefixRequest,
    ) -> RpcResult<RemovePrefixResponse> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "PrefixTables.RemovePrefix",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: RemovePrefixResponse = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': RemovePrefixResponse", e)))?;
        Ok(value)
    }
    #[allow(unused)]
    /// MatchPrefix an address in a prefix table
    async fn match_prefix(
        &self,
        ctx: &Context,
        arg: &MatchPrefixRequest,
    ) -> RpcResult<MatchPrefixResponse> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "PrefixTables.MatchPrefix",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: MatchPrefixResponse = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': MatchPrefixResponse", e)))?;
        Ok(value)
    }
}
